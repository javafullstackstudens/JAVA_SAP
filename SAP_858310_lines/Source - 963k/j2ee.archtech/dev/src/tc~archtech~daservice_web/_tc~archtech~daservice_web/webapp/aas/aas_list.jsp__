 package PackageNo1400144602;import com.sap.archtech.daservice.admin.*;import com.sap.archtech.daservice.ejb.*;import java.sql.*;import java.text.*;import java.util.*;import javax.naming.*; public class aas_list_jsp {  public void Checkmarx_Class_Init(HttpServletRequest request, HttpServletResponse response, HttpSession session, ServletContext application, PageContext pageContext) {jspInit();   page.errorPage = "aas_error.jsp";   

     
       String isUserValid = (String) session.getAttribute("isUserValid");
       if (!(isUserValid != null && isUserValid.equals("x")))
       {
     

  request.getRequestDispatcher("../index.jsp").forward(request,response);

     
       }
       String archivepath = request.getParameter("archivepath");
       if (archivepath != null)
       {
  archivepath = archivepath.toLowerCase().trim();
  if (archivepath.length() < 3)
     archivepath = "/";
  else if (archivepath.endsWith("/"))
     archivepath = archivepath.substring(0, archivepath.length()-1);
       }
       else
       {
  archivepath = "/";  
       }
     



















     
   Connection connection = null;
   PreparedStatement pst1 = null;
   ResultSet result = null;
   int hits = 0;
   
   // Get Timestamp Formatter
   SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
   //sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
   
   try
   {
     
     // Get DB connection
     AdminConnectionProvider acp = new AdminConnectionProvider();
     connection = acp.getConnection();
  
     		// Get all archive stores
     		HashMap hm = new HashMap();
     		Set set = new TreeSet();
     		Context ctx = new InitialContext();
     		ArchStoreConfigLocalHome beanLocalHome =
     			(ArchStoreConfigLocalHome) ctx.lookup("java:comp/env/ArchStoreConfigBean");
     		Collection col = beanLocalHome.findAll();
     		Iterator iter = col.iterator();
     while(iter.hasNext())
     {
     		  ArchStoreConfigLocal ascl = (ArchStoreConfigLocal) iter.next();
     		  String archStore = ascl.getArchivestore();
     		  set.add(archStore);
     		  hm.put((Long)ascl.getPrimaryKey(), archStore);
     } 
   
     // Get collection
     pst1 = connection.prepareStatement("SELECT * FROM BC_XMLA_COL WHERE URI = ?");
     pst1.setString(1, archivepath);
     result = pst1.executeQuery();
     long colid = 0;
     String uri = "";
     String coltype = "";
     Timestamp creationtime = null;
     String creationuser = "";
     long storeid = 0;
     long parentcolid = 0;
     String errorText = "";
     while(result.next())
     {
       colid = result.getLong("COLID");
       uri = result.getString("URI");
       coltype = result.getString("COLTYPE");
       if (coltype.equalsIgnoreCase("H"))
 coltype = "Home";
       else if (coltype.equalsIgnoreCase("A"))
 coltype = "Application";
       else
       {
     	errorText = "Assigning / unassigning a system collection is not allowed!";
     	continue;
       }	
       creationtime = result.getTimestamp("CREATIONTIME");
       creationuser = result.getString("CREATIONUSER");
       storeid = result.getLong("STOREID");
       parentcolid = result.getLong("PARENTCOLID");
       
       // Check if collection should be displayed for assignment
       AssignArchiveStores aas = new AssignArchiveStores(request);
       boolean hasAssignedDescendants = aas.hasAssignedDescendants(connection, colid);
     	  boolean hasAssignedDescendantsContainingResources = aas.hasAssignedDescendantsContainingResources(connection, colid);
     	  boolean hasAssignedAncestor = aas.hasAssignedAncestor(connection, parentcolid);		  
     	  if ((hasAssignedAncestor) || (storeid == 0 && hasAssignedDescendants) || (storeid != 0 && hasAssignedDescendantsContainingResources))
     	  {
   	errorText = "Assigning / unassigning archive path " + archivepath + " is not possible!";
     	    continue;
     	  }
       hits++;
     } // End while() loop
     
     // Close result set and prepared statement
     result.close();
     pst1.close();
     
     // Commit database
     connection.commit();	 
     
     // Check if the entered archive path is valid
     if (hits == 0)
     {
     	if (errorText.length() == 0)
     	{
     


       response.write(archivepath)+response.write(request.getAttribute("archivepath"));


     
     	}
     	else
     	{
     


   response.write(errorText);


     
     	}
     }    
     else
     {
     















response.write(uri);


response.write(coltype);


response.write(sdf.format(new java.util.Date(creationtime.getTime() + (creationtime.getNanos() / 1000000))));


response.write(creationuser);






   
   String selectedArchiveStore = (String) hm.get(new Long(storeid));
   if (selectedArchiveStore == null)
   {
     selectedArchiveStore = "None";
   

 response.write(selectedArchiveStore)+response.write(request.getAttribute("selectedArchiveStore"));response.write(selectedArchiveStore)+response.write(request.getAttribute("selectedArchiveStore"));

   
     			    Iterator it = set.iterator();
     			    while (it.hasNext())
     {
       String notSelectedArchiveStore = (String) it.next();
       if (!(notSelectedArchiveStore.equals(selectedArchiveStore)))
       {
   

 response.write(notSelectedArchiveStore);    response.write(notSelectedArchiveStore);

   
       }
     } // End while loop
   }
   else
   {
     			  

response.write(selectedArchiveStore)+response.write(request.getAttribute("selectedArchiveStore"));response.write(selectedArchiveStore)+response.write(request.getAttribute("selectedArchiveStore"));


 	
   }
   




       response.write(colid);




       response.write(archivepath)+response.write(request.getAttribute("archivepath"));









   
     } // End else 
   } // End try
   catch (SQLException sqlex)
   {
   
     // Rollback database
     connection.rollback();
     
     // Forward SQL exception
     throw sqlex;
   }
   catch (Exception ex)
   {
   
     	    // Rollback database
     	    connection.rollback();
     
     	    // Forward Exception
     	    throw ex;
   }
   finally
   {
     try
     {

       // Close DB Objects
       if (result != null)
 result.close();
       if (pst1 != null)
 pst1.close();
      if (connection != null)
 connection.close();
     }
     catch (SQLException sqlex)
     {
       throw new SQLException("Error while closing database objects: " + sqlex);
     }
   }
   
}

}
