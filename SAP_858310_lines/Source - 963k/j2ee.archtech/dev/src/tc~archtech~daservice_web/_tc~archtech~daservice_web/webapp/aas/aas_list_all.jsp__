 package PackageNo1764684834;import com.sap.security.api.*;import com.sap.archtech.daservice.mbeans.*;import com.sap.archtech.daservice.admin.*;import com.sap.archtech.daservice.ejb.*;import java.sql.*;import java.text.*;import java.util.*;import javax.naming.*;import javax.sql.*; public class aas_list_all_jsp {  public void Checkmarx_Class_Init(HttpServletRequest request, HttpServletResponse response, HttpSession session, ServletContext application, PageContext pageContext) {jspInit();   page.errorPage = "aas_error.jsp";   

     
       String isUserValid = (String) session.getAttribute("isUserValid");
       if (!(isUserValid != null && isUserValid.equals("x")))
       {
     

  request.getRequestDispatcher("../index.jsp").forward(request,response);

     
       }
     



















 
 
 IUser user = UMFactory.getAuthenticator().getLoggedInUser();
 boolean hasPermission = user.hasPermission(new XmldasAdminPermission("write", "*"));
 if (hasPermission == true)
 {
 
 













     
   Connection connection = null;
   PreparedStatement pst1 = null;
   ResultSet result = null;
   
   // Get Timestamp Formatter
   SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
   //sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
   
   try
   {
     
     // Get DB connection
     AdminConnectionProvider acp = new AdminConnectionProvider();
     connection = acp.getConnection();
  
     	    // Get all archive stores
     		HashMap hm = new HashMap();
     		ArrayList al = new ArrayList();
     		Context ctx = new InitialContext();
     		ArchStoreConfigLocalHome beanLocalHome =
     		    (ArchStoreConfigLocalHome) ctx.lookup("java:comp/env/ArchStoreConfigBean");
     		Collection col = beanLocalHome.findAll();
     		Iterator iter = col.iterator();
     		while(iter.hasNext())
     		{
     		  ArchStoreConfigLocal ascl = (ArchStoreConfigLocal) iter.next();
     		  String archStore = ascl.getArchivestore();
     		  al.add(archStore);
     		  hm.put((Long)ascl.getPrimaryKey(), archStore);
     		} 
  
     // Get all home collections
     pst1 = connection.prepareStatement("SELECT * FROM BC_XMLA_COL I WHERE COLTYPE = 'H' ORDER BY URI");
     result = pst1.executeQuery();
     while(result.next())
     {
       long colid = result.getLong("COLID");
       String uri = result.getString("URI") + "/";
       Timestamp creationtime = result.getTimestamp("CREATIONTIME");
       String creationuser = result.getString("CREATIONUSER");
       long storeid = result.getLong("STOREID");
       String selectedArchiveStore = (String) hm.get(new Long(storeid));
       if (selectedArchiveStore == null)
     selectedArchiveStore = "None";
     		  String coltype = result.getString("COLTYPE");
     		  if (coltype.equalsIgnoreCase("H"))
     		    coltype = "Home";
     		  else
     			coltype = "Application";
   



response.write(uri);


response.write(coltype);


response.write(sdf.format(new java.util.Date(creationtime.getTime() + (creationtime.getNanos() / 1000000))));


response.write(creationuser);


response.write(selectedArchiveStore);



       response.write(uri);





   
     } // End while() loop
     
     // Close result set and prepared statement
     result.close();
     pst1.close();
     
     // Commit database
     connection.commit();
     
   } // End try
   catch (SQLException sqlex)
   {
   
     // Rollback database
     connection.rollback();
     
     // Forward SQL exception
     throw sqlex;
   }
   finally
   {
     try
     {

       // Close DB Objects
       if (result != null)
 result.close();
       if (pst1 != null)
 pst1.close();
       if (connection != null)
 connection.close();
     }
     catch (SQLException sqlex)
     {
       throw new SQLException("Error while closing database objects: " + sqlex);
     }
   }
   










 
     
 }
 else
 {
     
 






 
 
 }
 
 
}

}
