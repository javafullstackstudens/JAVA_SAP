 package PackageNo1449615546; public class selfreg_pagenavigation_jsp {  public void Checkmarx_Class_Init(HttpServletRequest request, HttpServletResponse response, HttpSession session, ServletContext application, PageContext pageContext) {jspInit();
































  response.write(SelfRegLogic.performSearchResultNavigateAction)+response.write(request.getAttribute("SelfRegLogic").performSearchResultNavigateAction);















  response.write(pageKey)+response.write(request.getAttribute("pageKey"));

   response.write(pageName)+response.write(request.getAttribute("pageName"));


response.write(selfRegAlias)+response.write(request.getAttribute("selfRegAlias"));











  response.write(SelfRegLogic.performSearchResultNavigateAction)+response.write(request.getAttribute("SelfRegLogic").performSearchResultNavigateAction);











  response.write(pageKey)+response.write(request.getAttribute("pageKey"));

   response.write(pageName)+response.write(request.getAttribute("pageName"));

response.write(selfRegAlias)+response.write(request.getAttribute("selfRegAlias"));















  response.write(SelfRegLogic.performSearchResultNavigateAction)+response.write(request.getAttribute("SelfRegLogic").performSearchResultNavigateAction);

















  response.write(pageKey)+response.write(request.getAttribute("pageKey"));

   response.write(pageName)+response.write(request.getAttribute("pageName"));


response.write(selfRegAlias)+response.write(request.getAttribute("selfRegAlias"));



   response.write(SelfRegLogic.getPerformSearchResultNavigateAction())+response.write(request.getAttribute("SelfRegLogic").getPerformSearchResultNavigateAction());
   response.write(pageKey)+response.write(request.getAttribute("pageKey"));response.write(pageName)+response.write(request.getAttribute("pageName"));


    response.write(colspan)+response.write(request.getAttribute("colspan"));
       if ( entryExit.length() > 0 ) entryExit.delete(0, entryExit.length());		   
     	   entryExit.append(userAdminMessages.print(new Message("START_OF", navigateBar))); 
    response.write(webpath)+response.write(request.getAttribute("webpath"));


    response.write(entryExit.getToString())+response.write(request.getAttribute("entryExit").getToString());

    response.write(navigateBar)+response.write(request.getAttribute("navigateBar"));

    response.write(webpath)+response.write(request.getAttribute("webpath"));


       if ( util.isRTL(proxy.getLocale()) ) { 
 if ( currentPage < totalPages ) { 

    response.write(webpath)+response.write(request.getAttribute("webpath"));




    response.write(userAdminLocale.get("NEXT_PAGE"));
 response.write(currentPage+1);
    } else { 
   response.write(webpath)+response.write(request.getAttribute("webpath")); response.write(userAdminLocale.get("NEXT_PAGE"));
 } 
       } else { 
 if ( currentPage < 2 ) { 
   response.write(webpath)+response.write(request.getAttribute("webpath"));response.write(userAdminLocale.get("PREVIOUS_PAGE"));
 } else { 

    response.write(webpath)+response.write(request.getAttribute("webpath"));




    response.write(userAdminLocale.get("PREVIOUS_PAGE"));
 response.write(currentPage-1);
 } 
       } 


      response.write(userAdminLocale.get("TOTAL"));response.write(totalItems);response.write(userAdminLocale.get("ITEMS"));response.write(userAdminLocale.get("DISPLAY"));

for (int i=0; i<itemPerPageOptions.length; i++ ) {
 int item = itemPerPageOptions[i].intValue();
 boolean selected = false;
 if (item==currentItemPerPage) {
     selected = true;
 }
    response.write(item);response.write(selected?"SELECTED":"");response.write(itemPerPageOptions[i].intValue())+response.write(request.getAttribute("itemPerPageOptions[i]").intValue());
} 
     response.write(userAdminLocale.get("PER_PAGE"));response.write(userAdminLocale.get("THIS_IS"));

for(int i=1;i<=totalPages;i++) {
  boolean selected = false;
  if ( i == currentPage ) {
     selected = true;
  } 
    response.write(i)+response.write(request.getAttribute("i"));response.write(selected?"SELECTED":"");response.write(i)+response.write(request.getAttribute("i"));
} 
     response.write(userAdminLocale.get("OF"));response.write(totalPages);response.write(userAdminLocale.get("PAGES"));


       if ( util.isRTL(proxy.getLocale()) ) { 
 if ( currentPage < 2 ) { 
   response.write(webpath)+response.write(request.getAttribute("webpath"));response.write(userAdminLocale.get("PREVIOUS_PAGE"));
 } else { 

    response.write(webpath)+response.write(request.getAttribute("webpath"));




    response.write(userAdminLocale.get("PREVIOUS_PAGE"));
 response.write(currentPage-1);
 } 
       } else { 
 if ( currentPage < totalPages ) { 

    response.write(webpath)+response.write(request.getAttribute("webpath"));




    response.write(userAdminLocale.get("NEXT_PAGE"));
 response.write(currentPage + 1);
    } else {
   response.write(webpath)+response.write(request.getAttribute("webpath")); response.write(userAdminLocale.get("NEXT_PAGE"));
 } 
       } 



       entryExit.delete(0, entryExit.length());
     	   entryExit.append(userAdminMessages.print(new Message("END_OF", navigateBar))); 
    response.write(webpath)+response.write(request.getAttribute("webpath"));


    response.write(navigateBar)+response.write(request.getAttribute("navigateBar"));
    response.write(entryExit.getToString())+response.write(request.getAttribute("entryExit").getToString());
}

}
